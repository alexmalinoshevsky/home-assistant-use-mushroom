---
#-
#       _ _                 _
#   ___| (_)_ __ ___   __ _| |_ ___
#  / __| | | '_ ` _ \ / _` | __/ _ \
# | (__| | | | | | | | (_| | ||  __/
#  \___|_|_|_| |_| |_|\__,_|\__\___|
#
#
#- from github.com/basnijholt/home-assistant-config

- alias: "Climate: turn on the heating 30 min before waking up"
  triggers:
    trigger: template
    value_template: >
      {{ states("sensor.time")[0:5] == states("sensor.half_hour_before_alarm") }}
  conditions:
    conditions: state
    entity_id:
      - input_boolean.alarm_clock
      - input_boolean.automatic_temperature
    state: "on"
  actions:
    service: script.set_high_temperature

- alias: "Climate: turn on the heating when going home"
  triggers:
    trigger: numeric_state
    entity_id: proximity.home
    below: 6
    above: 1
  conditions:
    - condition: state
      entity_id: input_boolean.automatic_temperature
      state: "on"
    - condition: time
      after: "16:00:00"
      before: "22:00:00"
    - "{{ is_state_attr('proximity.home', 'dir_of_travel', 'towards') }}"
    - "{{ not is_state_attr('climate.thermostat', 'temperature', states('input_number.temperature_high')) }}"
    - condition: state
      entity_id: binary_sensor.no_one_home
      state: "on"
  actions:
    - service: script.set_high_temperature
    - service: notify.all_iphones
      data:
        title: "Climate"
        message: "Automatically turned on the heating 🥵℃"

- alias: "Climate: turn off the heating at 22:00"
  triggers:
    trigger: time
    at: "22:00"
  conditions:
    - condition: state
      entity_id: input_boolean.automatic_temperature
      state: "on"
    - condition: state
      entity_id: binary_sensor.no_one_home
      state: "off"
    - "{{ not is_state_attr('climate.thermostat', 'temperature', states('input_number.temperature_low')|float(0)) }}"
  actions:
    - service: script.set_low_temperature
    - service: notify.all_iphones
      data:
        message: "Turned off the heating 🥶, click to turn it on again?"
        data:
          actions:
            - action: TURN_ON_HEATING
              title: Turn on heating
              activationMode: background
              authenticationRequired: true
              destructive: true
    - wait_for_trigger:
        trigger: event
        event_type: mobile_app_notification_action
        event_data:
          actions: TURN_ON_HEATING
      timeout: "00:00:20"
      continue_on_timeout: false
    - service: script.set_high_temperature

- alias: "Climate: set outside temperature every hour"
  triggers:
    trigger: time_pattern
    hours: "/1"
  actions:
    service: mqtt.publish
    data:
      topic: actions/otmonitor/outside
      payload_template: >
        {{ state_attr("weather.huis", "temperature") }}

- alias: "Climate: warning when heating on and living room door open"
  triggers:
    trigger: state
    entity_id: binary_sensor.openclose_bedroom
    to: "on"
    for: "00:05:00"
  conditions: "{{ state_attr('climate.thermostat', 'temperature') >= 18 }}"
  actions:
    - repeat:
        while:
          - condition: state
            entity_id: binary_sensor.openclose_bedroom
            state: "on"
          - condition: template
            value_template: "{{ repeat.index <= 6 }}"
        sequence:
          - service: notify.all
            data:
              title: "Climate"
              message: "The living room door is open and the heating is on! ⚠️ Warning #{{ repeat.index }}!"
          - delay: "00:05:00"
    - condition: state
      entity_id: binary_sensor.openclose_bedroom
      state: "on"
    - service: notify.all
      data:
        title: "Climate"
        message: "Turning off the heating!"
    - service: climate.set_temperature
      entity_id: climate.thermostat
      data:
        temperature: >
          {{ states("input_number.temperature_low") }}

- alias: "Climate: set temperature setpoint to 50 °C"
  triggers:
    trigger: time_pattern
    hours: "/2"
  actions:
    service: mqtt.publish
    data:
      topic: actions/otmonitor/maxdhwsetpt
      payload: "50"

- alias: "Climate: automatically turn off spaceheater when no-one is in the guest room"
  triggers:
    - trigger: time_pattern
      minutes: "/10"
    - trigger: state
      entity_id: binary_sensor.activity_in_guest_room
      to: "off"
  conditions:
    conditions: state
    entity_id: binary_sensor.activity_in_guest_room
    state: "off"
  actions:
    service: switch.turn_off
    entity_id: switch.space_heater
